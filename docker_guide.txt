#difference between RUN and CMD:
RUN is an image build step, the state of the container after a RUN
 command will be committed to the container image. A Dockerfile can 
 have many RUN steps that layer on top of one another to build the image.

CMD is the command the container executes by default when you launch 
the built image. A Dockerfile will only use the final CMD defined. 
The CMD can be overridden when starting a container with docker 
run $image $other_command. 




FROM node:15
WORKDIR /app

#little trick to speedup the process: since dependencies do not change very
#often and the result are cached this step is bypassed
COPY package.json .

RUN npm install

#since our code is the only part that is going to change very frequently i decoupled that
#from copying package.json so it's probable that it's going to use the cached result
#and this copy will take infinite less time 
COPY . ./

EXPOSE 3000

CMD ["node", "index.js"]


docker build -t $imageName .
docker build -t node-devops .


docker run -d -p 3000:3000 --name $containerNameProcessList $imageName
docker run -d -p 3000:3000 --name node-devops node-devops


run started and finished almost at the same time
to see where the error is start in attach mode to see the real message (or check the logs)
the error was a comma missing in the CMD row between node and index.js



to see logs:
    docker logs $containerName
    docker logs node-devops



to attach an interactive terminal on a running container: 
    docker exec -it node-devops bash


to attach a persistent volume pointing from local dir to /app
    docker run -v $(pwd):/app -d -p 3000:3000 --name node-devops node-devops


after running 
docker run -v $(pwd):/app -d -p 3000:3000 --name node-devops node-devops
the instructor deleted local no_modules folder but since we synced our local folder with /app
the app ended up broken

the workaround is to create a second volume. an anonymous one with more specificity like: /app/node_modules.
docker is going to give it a random name so it cannot possibly be accidentaly deleted

    docker run -v $(pwd):/app -v /app/node_modules -d -p 3000:3000 --name node-devops node-devops

to preserve our folders from accidental write inside the container we can add the "ro" (read only) attribute like
    docker run -v $(pwd):/app:ro -v /app/node_modules -d -p 3000:3000 --name node-devops node-devops

francesco@debian:~/prjs/devops$     docker exec -it node-devops bash
root@1f5167811c39:/app# touch fra
touch: cannot touch 'fra': Read-only file system


to pass environment variables use --env PORT=$number
and remember to add the line on Dockerfile 
    docker run -v $(pwd):/app:ro -v /app/node_modules -d --env PORT=4000 -p 3000:4000 --name node-devops node-devops

    #(default to 3000 if port is null)
    ENV PORT 3000

    EXPOSE $PORT


or we can use a env_file
        docker run -v $(pwd):/app:ro -v /app/node_modules -d --env-file ./.env -p 3000:4000 --name node-devops node-devops


to stop a container 
    docker stop $container_id


once inside the container with exec check environment variables with "printenv"

YARN_VERSION=1.22.5
HOSTNAME=8fb71984487d
PWD=/app
HOME=/root
PORT=4000
NODE_VERSION=15.14.0
TERM=xterm
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
_=/usr/bin/env

delete unnecessary volumes, all those volumes without an effective existing container
docker volume prune


but if we want to kill the container as long as with the attached volume pass -v flag
docker rm -fv $container_id


alias drun="docker run -v $(pwd):/app:ro -v /app/node_modules -d --env PORT=4000 -p 3000:4000 --name node-devops node-devops"
drun


alias drun="docker run -v $(pwd):/app:ro -v /app/node_modules -d --env-file ./.env -p 3000:4000 --name node-devops node-devops"
drun



to install docker-compose:
    download https://github.com/docker/compose/releases/download/v2.3.4/docker-compose-linux-x86_64
    rename into /usr/bin/docker-compose
    chmod +x 

start container from docker-compose.yml
    docker-compose up --detach


stop a container run from compose
francesco@debian:~/prjs/devops$ docker-compose down -v
[+] Running 2/2
 ⠿ Container devops-node-devops-1  Removed                                                                    2.1s
 ⠿ Network devops_default          Removed                                                                    0.7s


if some modification has been made to the images a force rebuild must be issued
    docker-compose up -d --build


#20220404:
#made 3 docker-compose.yml file. a base one: docker-compose.yml
version: "3"
services:
  node-devops:
    build: .
    ports:
      - "3000:3000"
    environment:
      - PORT=3000

#then one for dev and one for prod each one with its own specificities

#to build and take it up
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d

#and now to take it down -v remove network or volume ?
docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v


alias dc_devu="docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d $1 $2"
alias dc_produ="docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d $1 $2"
alias dc_devd="docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v"
alias dc_prodd="docker-compose -f docker-compose.yml -f docker-compose.prod.yml down -v"

alias dexec="docker exec -it devops-node-devops-1 bash" 
alias dexdev="docker exec -it devops-node-devops-1 bash" 
alias dexmon="docker exec -it devops-mongo-1 bash" 
alias dexmonu='mongo -u "francesco" -p "password"'

alias dexred="docker exec -it devops-redis-1 redis-cli" 

this hack doesn't work. i don't know what i'm doing wrong but the same number of packages are get installed 
either by npm install and npm install --only=[production|prod] (i tried both)
but i found a working solution: entering into container and issuing npm prune --production entirely remove 
all devDependencies.

RUN if [ "$NODE_ENV" = "development" ]; \
        then npm install; \
        else npm install --only=prod; \
        fi


https://www.youtube.com/watch?v=9zUHg7xjIqQ


#20220410

now in docker-compose.yml has added anothe service:
  mongo:
    image: mongo       #not build because we take it directly from docker hub
    environment:
      - MONGO_INITDB_ROOT_USERNAME=francesco
      - MONGO_INITDB_ROOT_PASSWORD=password

running dc_devu started pulling automatically

dexmon 
mongo -u "francesco" -p "password"


docker linux store data on /var/lib/docker
docker windows instead rather store data docker ps -a
on C:\ProgramData\DockerDesktop 

to get rid of all unnecessary volumes do the following:
start all needed containers and then run docker volume --prune 
it'll be deleting all stale containers


#now we install mongoose and rebuild it again
npm i mongoose 
dc_devu


#20220411.
ip address taken from docker inspect $container_id or NAMES (devops-node-devops-1)
NetworkSettings.Networks.IPAddress 172.22.0.2

but also can be taken from Dockercompose services  node-devops and mongo as connecting to custom networks activates
DNS services, so "mongo" can be used as IpAddress 

docker inspect $container_id
docker logs $container_id



#20220413 - 01:54
created .config/config.js with environment variables. those are taken from docker-compose-dev.yml section "environment"



#202215
introducted depends_on: mongo on docker-compose
it doens't completely solve our issue on which container get spun up first because it spun mongo first but when then node-app gets spun mongo cannot be 
entirelly up and running


implemented func: connectWithRetry 

i can invoke a command to satr just a single container no matter the fact that in the compose files two are listed.
that happens because in the docker-compose has been issued:
    depends_on:
      - mongo
so when i run       
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d node-devops
it brings up mongo too



#20220418
curl -X GET -d '{"title": 123456, "body": "francesco"}' -H "Content-Type: application/json" localhost:3000/api/v1/posts | json_pp 

francesco@debian:~/prjs/devops$ curl -X GET localhost:3000/api/v1/posts |json_pp
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   352  100   352    0     0  39111      0 --:--:-- --:--:-- --:--:-- 39111
{
   "data" : {
      "posts" : [
         {
            "__v" : 0,
            "_id" : "625dc233dddf82446bc60125"
         },
         {
            "_id" : "625dc25edddf82446bc60127",
            "__v" : 0
         },
      ]
   },
   "status" : "success",
   "results" : 2
}


curl -X POST -d '{"title": 123456, "body": "francesco"}' -H "Content-Type: application/json" localhost:3000/api/v1/posts

curl -X GET localhost:3000/api/v1/posts/625dc233dddf82446bc60125

curl -X PATCH -d '{"title": "2222", "body": "QQQQQQQQ"}' -H "Content-Type: application/json" localhost:3000/api/v1/posts/625dd281b507c9bd3bae9b3e

625dd281b507c9bd3bae9b3e

"_id":"625dc233dddf82446bc60125"



#20220421: install bcryptjs, but in order to work properly it needed an upgrade of nodejs:

sudo npm cache clean -f
sudo npm install -g n
sudo n stable
To upgrade to latest version (and not current stable) version, you can use

sudo n latest
Fix PATH:

  sudo apt-get install --reinstall nodejs-legacy     # fix /usr/bin/node
To undo:

  sudo n rm 6.0.0     # replace number with version of Node that was installed
  sudo npm uninstall -g n



curl -i -X POST -d '{"username": "francescone", "password": "password"}' -H "Content-Type: application/json" localhost:3000/api/v1/user/signup

curl -i -X POST -d '{"username": "francescone", "password": "password"}' -H "Content-Type: application/json" localhost:3000/api/v1/user/login

curl -i -X GET localhost:3000/api/v1/user/get/62670b540bc6524466d58de6


curl --cookie "Name=Value" https://reqbin.com/echo

curl -i -X POST --cookie "connect.sid=s%3AAOcLpODB0Q1CgYAFo_KTfGQqbZQ2kesO.zZ91%2Fy8%2FUm3jQwM9G167jx7kYkr%2FOIgLNTzuiCRjHrg"    -d '{"title": "lamela", "body": "ilcorpo"}' -H "Content-Type: application/json" localhost:3000/api/v1/posts






#20220424. redis installation

docker-compose

  redis:
    image: redis


npm install redis connect-redis express-session




#20220428. nginx installed 

docker-compose.yml
  nginx:
    image: nginx:stable-alpine
    ports:
      - "3000:80"
    volumes:
      #not working directly mapping single file
      #- ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - type: bind
        source: ./nginx/default.conf
        target: /etc/nginx/conf.d/default.conf



./nginx/default.conf

server {
    listen 80;

    location /api {

        #nginx act as a proxy so strips original client ip address 
        #like that we instruct it to set it on the header
        proxy_set_header X-Real-IP $remote_addr;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        
        proxy_pass http://node-app:3000;
        proxy_redirect off;
    }
}



#20220429

scale application devops_node-devops

alias scale2="docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --scale node-devops=2"



#split terminal to see refreshing logs 
docker logs devops-node-devops-1 -f
docker logs devops-node-devops-2 -f

#send multiple requests that show up each time through a different terminal.

curl -X GET localhost:3000/api/v1

install cors to allow requests from different domain

npm install cors

when building node container as it uses anonymous volumes those must be recreated using the -V option
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build --help
-V, --renew-anon-volumes        Recreate anonymous volumes instead of retrieving data from the previous containers.

docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build -V


const cors = require("cors")


digital ocean password: _Chicco.70f

ubuntu-node-devops-01

public ip address: 46.101.238.111

ssh root@46.101.238.111
The authenticity of host '46.101.238.111 (46.101.238.111)' can't be established.
ECDSA key fingerprint is SHA256:sW/HbVTqD0FAwl643Cgtk9nlBg3AcRWn6KWt21qNXEs.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '46.101.238.111' (ECDSA) to the list of known hosts.
root@46.101.238.111's password: 
Welcome to Ubuntu 20.04.4 LTS (GNU/Linux 5.4.0-107-generic x86_64)


  System load:  0.0               Users logged in:       0
  Usage of /:   6.2% of 24.06GB   IPv4 address for eth0: 46.101.238.111
  Memory usage: 20%               IPv4 address for eth0: 10.19.0.5
  Swap usage:   0%                IPv4 address for eth1: 10.114.0.2
  Processes:    103



go to https://get.docker.com/

# This script is meant for quick & easy install via:
#   $ curl -fsSL https://get.docker.com -o get-docker.sh
#   $ sh get-docker.sh

To run Docker as a non-privileged user, consider setting up the
Docker daemon in rootless mode for your user:

    dockerd-rootless-setuptool.sh install



#20220430

    docker-compose-prod

    environment:
      - NODE_ENV=production      #equal sign
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET} 


 mongo:
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}    



#20220501


#entropy, haveged
docker wasn't running from online server because it lacked entropy for generating randon numbers.
so installed haveged: apt install haveged

https://github.com/docker/compose/issues/6678#issuecomment-526831488.
https://stackoverflow.com/questions/59941911/docker-compose-up-hangs-forever-how-to-debug


francesco@debian:~/prjs/devops$ set -o
allexport       off
braceexpand     on
emacs           on
errexit         off
errtrace        off
functrace       off
hashall         on
histexpand      on
history         on
...
...
vi              off
xtrace          off

#automatic export of defined variables
set -o allexport; source /root/.env; set +o allexport




#20220504


alias dc_devu="docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d $1 $2"
alias dc_produ="docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d $1 $2"
alias dc_devd="docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v"
alias dc_prodd="docker-compose -f docker-compose.yml -f docker-compose.prod.yml down -v"


#there's an option that allow us to rebuild just a single service of our orchestration:
#call docker-compose invoking the service like that:

docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build node-devops

#but if there are dependencies it builds those too. with --no-deps their building is skipped

docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build --no-deps node-devops

#force rebuild even if no modification occurred

docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --force-recreate node-devops
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --force-recreate --no-deps node-devops


#rename image to upload to docker hub. mandatory rule have it that name must be your namespace plus image name

docker image tag devops_node-devops frankietheface/node-devops


docker login: frankietheface Chicco.70

docker push frankietheface/node-devops 

inside docker-compose added:

  node-devops:
    build: .           #because we build our own image
    image: frankietheface/node-devops:latest              # <---- image name for pulling 



#20220505 

it's also possible to push while docker-composing, or specifically at the ended

#push all services
docker-compose -f docker-compose.yml -f docker-compose.dev.yml push

#push asked service
docker-compose -f docker-compose.yml -f docker-compose.dev.yml push node-devops

#if thee's a push there's a pull obviously...
in production environment we can pull to see if in the repo there's a more recent version 

docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull



11:44, 00:11

aggiornamento software
tecnico 
reset 
reset verifica linea


server=46.101.238.111:80
serverl=localhost:3000

server=$serverl


curl -i -X POST -d '{"username": "massimo", "password": "password"}' -H "Content-Type: application/json" ${server}/api/v1/user/signup

prima login
curl -i -X POST -d '{"username": "massimo", "password": "password"}' -H "Content-Type: application/json" ${server}/api/v1/user/login

poi post
cookie=s%3AnlYHwdLJLguQ8L9w02Aifzjk0-ebUJi5.9JctqdP5HrQNOwdSCwOzmpDLVjbWFEUxZEWxbznSjFE
curl -i -X POST --cookie "connect.sid=$cookie"    -d '{"title": "lamela", "body": "ilcorpo"}' -H "Content-Type: application/json" 46.101.238.111:80/api/v1/posts

